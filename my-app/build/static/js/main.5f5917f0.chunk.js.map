{"version":3,"sources":["components/Add.js","components/Article.js","components/News.js","App.js","serviceWorker.js","index.js"],"names":["Add","state","name","text","bigText","agree","onBtnClickHandler","e","preventDefault","props","onAddNews","id","Date","author","handleChange","currentTarget","value","setState","handleCheckboxChange","checked","validate","trim","this","className","type","onChange","placeholder","onClick","disabled","React","Component","Article","visible","handleReadMoreClck","data","href","News","renderNews","length","map","item","key","App","news","isLoading","handleAddNews","nextNews","fetch","then","response","json","setTimeout","Fragment","Array","isArray","nextFilteredNews","forEach","index","toLowerCase","indexOf","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5f5917f0.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Add extends React.Component {\r\n  state = {\r\n    name: '',\r\n    text: '',\r\n    bigText: '',\r\n    agree: false,\r\n  }\r\n  onBtnClickHandler = e => {\r\n    e.preventDefault()\r\n    const { name, text, bigText } = this.state\r\n    this.props.onAddNews({\r\n      id: +new Date(),\r\n      author: name,\r\n      text,\r\n      bigText,\r\n    })\r\n  }\r\n  handleChange = e => {\r\n    const { id, value } = e.currentTarget\r\n    this.setState({ [id]: value })\r\n  }\r\n  handleCheckboxChange = e => {\r\n    this.setState({ agree: e.currentTarget.checked })\r\n  }\r\n  validate = () => {\r\n    const { name, text, agree } = this.state\r\n    if (name.trim() && text.trim() && agree) {\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n  render() {\r\n    const { name, text, bigText } = this.state\r\n    return (\r\n      <form className=\"add\">\r\n        <input\r\n          id=\"name\"\r\n          type=\"text\"\r\n          onChange={this.handleChange}\r\n          className=\"add__author\"\r\n          placeholder=\"Ваше имя\"\r\n          value={name}\r\n        />\r\n        <textarea\r\n          id=\"text\"\r\n          onChange={this.handleChange}\r\n          className=\"add__text\"\r\n          placeholder=\"Текст новости\"\r\n          value={text}\r\n        />\r\n        <textarea\r\n          id=\"bigText\"\r\n          onChange={this.handleChange}\r\n          className=\"add__text\"\r\n          placeholder=\"Текст новости подробно\"\r\n          value={bigText}\r\n        />\r\n        <label className=\"add__checkrule\">\r\n          <input type=\"checkbox\" onChange={this.handleCheckboxChange} /> Я\r\n          согласен с правилами (Запрещено использовать слово ВЕЛОСИПЕД)\r\n        </label>\r\n        <button\r\n          className=\"add__btn\"\r\n          onClick={this.onBtnClickHandler}\r\n          disabled={!this.validate()}\r\n        >\r\n          Показать alert\r\n        </button>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nAdd.propTypes = {\r\n  onAddNews: PropTypes.func.isRequired,\r\n}\r\n\r\nexport { Add }","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Article extends React.Component {\r\n  state = {\r\n    visible: false,\r\n  }\r\n  handleReadMoreClck = e => {\r\n    e.preventDefault()\r\n    this.setState({ visible: true })\r\n  }\r\n  render() {\r\n    const { author, text, bigText } = this.props.data\r\n    const { visible } = this.state\r\n    return (\r\n      <div className=\"article\">\r\n        <p className=\"news__author\">{author}:</p>\r\n        <p className=\"news__text\">{text}</p>\r\n        {!visible && (\r\n          <a\r\n            onClick={this.handleReadMoreClck}\r\n            href=\"#readmore\"\r\n            className=\"news__readmore\"\r\n          >\r\n            Подробнее\r\n          </a>\r\n        )}\r\n        {visible && <p className=\"news__big-text\">{bigText}</p>}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nArticle.propTypes = {\r\n  data: PropTypes.shape({\r\n    id: PropTypes.number.isRequired,\r\n    author: PropTypes.string.isRequired,\r\n    text: PropTypes.string.isRequired,\r\n    bigText: PropTypes.string.isRequired,\r\n  }),\r\n}\r\n\r\nexport { Article }","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Article } from './Article'\r\n\r\nclass News extends React.Component {\r\n  renderNews = () => {\r\n    const { data } = this.props\r\n    let newsTemplate = null\r\n\r\n    if (data.length) {\r\n      newsTemplate = data.map(function (item) {\r\n        return <Article key={item.id} data={item} />\r\n      })\r\n    } else {\r\n      newsTemplate = <p>К сожалению новостей нет</p>\r\n    }\r\n\r\n    return newsTemplate\r\n  }\r\n  render() {\r\n    const { data } = this.props\r\n\r\n    return (\r\n      <div className=\"news\">\r\n        {this.renderNews()}\r\n        {data.length ? (\r\n          <strong className={'news__count'}>\r\n            Всего новостей: {data.length}\r\n          </strong>\r\n        ) : null}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nNews.propTypes = {\r\n  data: PropTypes.array.isRequired,\r\n}\r\n\r\nexport { News }","import React from 'react'\nimport { Add } from './components/Add'\nimport { News } from './components/News'\nimport './App.css'\n\nclass App extends React.Component {\n  state = {\n    news: null,\n    isLoading: false,\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    let nextFilteredNews\n\n    if (Array.isArray(state.news)) {\n      nextFilteredNews = [...state.news]\n      nextFilteredNews.forEach((item, index) => {\n        if (item.bigText.toLowerCase().indexOf('велосипед') !== -1) {\n          item.bigText = 'ВЫ НАРУШИЛИ ПРАВИЛО!'\n        }\n        if (item.text.toLowerCase().indexOf('велосипед') !== -1) {\n          item.text = 'ВЫ НАРУШИЛИ ПРАВИЛО!'\n        }\n        if (item.author.toLowerCase().indexOf('велосипед') !== -1) {\n          item.author = 'ВЫ НАРУШИЛИ ПРАВИЛО!'\n        }\n      })\n    }\n\n\n    return {\n      nextFilteredNews: nextFilteredNews\n    }\n  }\n\n  componentDidMount() {\n    this.setState({ isLoading: true })\n    fetch('http://localhost:3000/data/newsData.json')\n      .then(response => {\n        return response.json()\n      })\n      .then(data => {\n        setTimeout(() => {\n          this.setState({ isLoading: false, news: data })\n        }, 3000)\n      })\n  }\n  handleAddNews = data => {\n    const nextNews = [data, ...this.state.news]\n    this.setState({ news: nextNews })\n  }\n  render() {\n    const { news, isLoading } = this.state\n\n    return (\n      <React.Fragment>\n        <Add onAddNews={this.handleAddNews} />\n        <h3>Новости</h3>\n        {isLoading && <p>Загружаю...</p>}\n        {Array.isArray(news) && <News data={news} />}\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}